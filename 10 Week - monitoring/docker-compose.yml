version: '3.8'

services:
  # kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: ecommerce-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - ecommerce-network
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: ecommerce-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_NUM_PARTITIONS: 1
    ports:
      - "9092:9092"
    networks:
      - ecommerce-network
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # 공용 Redis
  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis
    ports:
      - "6379:6379"
    networks:
      - ecommerce-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3


  # Order Service Database
  mysql-order:
    image: mysql:8.0
    container_name: mysql-order
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: order_db
      MYSQL_USER: ruang
      MYSQL_PASSWORD: ruang
    ports:
      - "3307:3306"
    volumes:
      - order_data:/var/lib/mysql
      - ./init-sql/order-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ecommerce-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5


  # Balance Service Database
  mysql-balance:
    image: mysql:8.0
    container_name: mysql-balance
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: balance_db
      MYSQL_USER: ruang
      MYSQL_PASSWORD: ruang
    ports:
      - "3308:3306"
    volumes:
      - balance_data:/var/lib/mysql
      - ./init-sql/balance-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ecommerce-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5


  # Coupon Service Database
  mysql-coupon:
    image: mysql:8.0
    container_name: mysql-coupon
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: coupon_db
      MYSQL_USER: ruang
      MYSQL_PASSWORD: ruang
    ports:
      - "3309:3306"
    volumes:
      - coupon_data:/var/lib/mysql
      - ./init-sql/coupon-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ecommerce-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5


  # Product Service Database
  mysql-product:
    image: mysql:8.0
    container_name: mysql-product
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: product_db
      MYSQL_USER: ruang
      MYSQL_PASSWORD: ruang
    ports:
      - "3310:3306"
    volumes:
      - product_data:/var/lib/mysql
      - ./init-sql/product-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ecommerce-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5


  # User Service Database
  mysql-user:
    image: mysql:8.0
    container_name: mysql-user
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: user_db
      MYSQL_USER: ruang
      MYSQL_PASSWORD: ruang
    ports:
      - "3311:3306"
    volumes:
      - user_data:/var/lib/mysql
      - ./init-sql/user-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ecommerce-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5


  # ---------------------- #

  # API Gateway
  gateway:
    build:
      context: .
      dockerfile: gateway/Dockerfile
    container_name: gateway
    depends_on:
      balance-service:
        condition: service_healthy
      coupon-service:
        condition: service_healthy
      order-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
    ports:
      - "8090:8090"
    networks:
      - ecommerce-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8090/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3


  # Order Service
  order-service:
    build:
      context: .
      dockerfile: order-service/Dockerfile
    container_name: order-service
    depends_on:
      mysql-order:
        condition: service_healthy
      redis:
        condition: service_healthy
      balance-service:
        condition: service_healthy
      coupon-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-order:3306/order_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=order_user
      - SPRING_DATASOURCE_PASSWORD=order_pass
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - SERVICES_BALANCE_URL=http://balance-service:8081
      - SERVICES_COUPON_URL=http://coupon-service:8082
      - SERVICES_PRODUCT_URL=http://product-service:8083
      - SERVICES_USER_URL=http://user-service:8084
    ports:
      - "8080:8080"
    networks:
      - ecommerce-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3


  # Balance Service
  balance-service:
    build:
      context: .
      dockerfile: balance-service/Dockerfile
    container_name: balance-service
    depends_on:
      mysql-balance:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-balance:3306/balance_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=balance_user
      - SPRING_DATASOURCE_PASSWORD=balance_pass
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
    ports:
      - "8081:8081"
    networks:
      - ecommerce-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3


  # Coupon Service
  coupon-service:
    build:
      context: .
      dockerfile: coupon-service/Dockerfile
    container_name: coupon-service
    depends_on:
      mysql-coupon:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-coupon:3306/coupon_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=coupon_user
      - SPRING_DATASOURCE_PASSWORD=coupon_pass
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
    ports:
      - "8082:8082"
    networks:
      - ecommerce-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3


  # Product Service
  product-service:
    build:
      context: .
      dockerfile: product-service/Dockerfile
    container_name: product-service
    depends_on:
      mysql-product:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-product:3306/product_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=product_user
      - SPRING_DATASOURCE_PASSWORD=product_pass
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
    ports:
      - "8083:8083"
    networks:
      - ecommerce-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3


  # User Service
  user-service:
    build:
      context: .
      dockerfile: user-service/Dockerfile
    container_name: user-service
    depends_on:
      mysql-user:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-user:3306/user_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=user_user
      - SPRING_DATASOURCE_PASSWORD=user_pass
    ports:
      - "8084:8084"
    networks:
      - ecommerce-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8084/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  balance_data:
  coupon_data:
  order_data:
  product_data:
  user_data:
  redis_data:

networks:
  ecommerce-network:
    driver: bridge